# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- v2.x

stages:
- stage: Build

#  variables:
#    projectfile: '**/*.$(Agent.JobName).csproj'

  jobs:
  - job:
    strategy:
      maxParallel: 4
      matrix:
        WindowsWPF:
          PlatformLayer: WPF
          OSLayer: Windows
          PoolVmImg: 'windows-latest'
        WindowsGTK:
          PlatformLayer: GTK
          OSLayer: Windows
          PoolVmImg: 'windows-latest'
        LinuxGTK:
          PlatformLayer: GTK
          OSLayer: Any
          PoolVmImg: 'ubuntu-latest'
        MacOsGTK:
          PlatformLayer: GTK
          OSLayer: Any
          PoolVmImg: 'macOS-latest'

    variables:
      projectfile: '**/*.$(PlatformLayer).csproj'
      buildConfiguration: 'Release'
      targetDirectory: '$(Build.SourcesDirectory)/Source/$(AssemblyProductAttribute).$(PlatformLayer)/bin/$(buildConfiguration)'

    pool:
      vmImage: '$(PoolVmImg)'

    steps:

    - task: NuGetToolInstaller@1
      displayName: NuGet Install

    - task: NuGetCommand@2
      displayName: NuGet Restore
      inputs:
        restoreSolution: '**/*.sln'

    - task: CmdLine@2
      displayName: GTK# Install (Windows)
      condition: and(eq(variables['OSLayer'], 'Windows'), eq(variables['PlatformLayer'], 'GTK'))
      inputs:
        script: |
          msiexec /i https://xamarin.azureedge.net/GTKforWindows/Windows/gtk-sharp-2.12.45.msi /quiet

    - task: CmdLine@2
      displayName: GTK# Install (Ubuntu)
      condition: eq(variables['PoolVmImg'], 'ubuntu-latest')
      inputs:
        script: |
          set -x
          sudo apt-get install gtk-sharp2

    - task: MSBuild@1
      displayName: Compile
      inputs:
        solution: '$(projectfile)'
        msbuildArchitecture: 'x64'
        platform: 'AnyCPU'
        configuration: '$(buildConfiguration)'
        clean: true
        logProjectEvents: true
        logFileVerbosity: 'detailed'

#    - task: AssembyInfoReader@2
#      displayName: 'Assembly Variables'
#      inputs:
#        searchPattern: '$(Build.SourcesDirectory)/Source/AssemblyInfo.cs'

    - task: Bash@3
      displayName: 'Assembly Variables'
      env:
        ASSEMBLYFILE: '$(Build.SourcesDirectory)/Source/AssemblyInfo.cs'
      inputs:
        targetType: 'inline'
        script: |
          echo "Parsing '$ASSEMBLYFILE' ..."
          set -x
          VAR=`grep AssemblyVersionAttribute "$ASSEMBLYFILE" | sed -e 's,[^\"]*\"\([^\"]*\)\".*,\1,g'`
          echo "##vso[task.setvariable variable=AssemblyVersionAttribute]$VAR"
          VAR=`grep AssemblyProductAttribute "$ASSEMBLYFILE" | sed -e 's,[^\"]*\"\([^\"]*\)\".*,\1,g'`
          echo "##vso[task.setvariable variable=AssemblyProductAttribute]$VAR"

    - task: CopyFiles@2
      displayName: 'Copy Datafiles'
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)/Source/Datafiles'
        Contents: '**'
        TargetFolder: '$(targetDirectory)/'

    - task: CopyFiles@2
      displayName: 'Copy Designs'
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)/Source/Designs'
        Contents: '**'
        TargetFolder: '$(targetDirectory)/Designs'

    - task: ArchiveFiles@2
      displayName: 'Archive $(Build.ArtifactStagingDirectory)'
      inputs:
        rootFolderOrFile: '$(targetDirectory)/'
        includeRootFolder: false
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.DefinitionName).$(System.JobName)-$(AssemblyVersionAttribute)-PreRelease.zip'


#- stage: Deploy
#  dependsOn: Build
#
# https://docs.microsoft.com/de-de/azure/devops/pipelines/process/variables?view=azure-devops&tabs=yaml%2Cbatch#use-outputs-in-a-different-stage
#
#  jobs:
#  - job: Store
#    displayName: 'Deploy Artifacts'
#    pool:
#      vmImage: 'windows-latest'
#
#    steps:

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: PreRelease'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        publishLocation: 'Container'
        ArtifactName: 'PreRelease'
