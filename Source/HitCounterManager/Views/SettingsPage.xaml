<?xml version="1.0" encoding="UTF-8"?>
<!--
//MIT License

//Copyright (c) 2021-2022 Peter Kirmeier

//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:

//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.

//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//SOFTWARE.
-->
<ContentPage xmlns="http://xamarin.com/schemas/2014/forms" 
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:common="clr-namespace:HitCounterManager.Common;assembly=HitCounterManager"
             xmlns:local="clr-namespace:HitCounterManager.ViewModels;assembly=HitCounterManager"
             xmlns:models="clr-namespace:HitCounterManager.Models;assembly=HitCounterManager"
             x:Class="HitCounterManager.Views.SettingsPage"
             NavigationPage.HasNavigationBar="False"
             NavigationPage.HasBackButton="False"
             BackgroundColor="{AppThemeBinding Default=BurlyWood, Dark={StaticResource AlmostBlack}}">

    <!-- TODO: Tooltips -->

    <ContentPage.BindingContext>
        <local:SettingsViewModel />
    </ContentPage.BindingContext>

    <StackLayout Padding="2" Orientation="Vertical" HorizontalOptions="FillAndExpand" VerticalOptions="FillAndExpand">

        <Grid Padding="0,0,30,0" Margin="0" RowSpacing="0" ColumnSpacing="0" HorizontalOptions="FillAndExpand">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="60" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="60" />
            </Grid.ColumnDefinitions>
            <Button Grid.Row="0" Grid.Column="0" Margin="0" Padding="4" Clicked="PopBack_Clicked" WidthRequest="50" Text="Back" HorizontalOptions="Start"/>
            <Label  Grid.Row="0" Grid.Column="1" Margin="0" HorizontalOptions="CenterAndExpand" VerticalTextAlignment="Center" Text="SETTINGS" FontAttributes="Bold" FontFamily="Arial" FontSize="{OnPlatform 16, GTK=14}"/>
        </Grid>
        <!-- Workaround: GTK is failing to use inherited color, so it is applied manually here -->
        <ScrollView Padding="0,0,30,0" Margin="6,0,0,0" HorizontalOptions="FillAndExpand" VerticalOptions="FillAndExpand" BackgroundColor="{Binding Source={RelativeSource AncestorType={x:Type ContentPage}},Path=BackgroundColor, Mode=OneWay}">

            <StackLayout Orientation="Vertical" VerticalOptions="FillAndExpand" HorizontalOptions="FillAndExpand">

                <!-- ================== -->
                <!-- ================== -->
                <!-- ================== -->

                <!-- Workaround: GTK is failing to use inherited color, so it is applied manually here -->
                <Frame BackgroundColor="#CC6600" OutlineColor="#CC6600" Padding="{OnPlatform 8, WPF=0}" HorizontalOptions="FillAndExpand" VerticalOptions="StartAndExpand" >
                    <Label Padding="{OnPlatform 0, WPF=8}" HorizontalOptions="CenterAndExpand" Text="GLOBAL SHORTCUTS" FontAttributes="Bold" FontFamily="Arial" FontSize="{OnPlatform 14, GTK=12}" />
                </Frame>

                <Label HorizontalOptions="StartAndExpand" Text="Global hot keys not supported in this version!" TextColor="Red"
                       IsVisible="{Binding Source={x:Static common:Statics.GlobalHotKeySupport}, Converter={common:NegateBoolConverter}, Mode=OneTime}"/>
                <Grid Padding="0" Margin="10,0,10,0" RowSpacing="4" ColumnSpacing="6" HorizontalOptions="FillAndExpand"
                      IsEnabled="{x:Static common:Statics.GlobalHotKeySupport, Mode=OneTime}">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Switch Grid.Row="0" Grid.Column="0" Margin="0" IsToggled="{Binding ShortcutHitEnable, Mode=TwoWay}" OnColor="Orange" ThumbColor="Green" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Label  Grid.Row="0" Grid.Column="1" Margin="0" Text="Hit +1 (boss):" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Button Grid.Row="0" Grid.Column="2" Margin="0" Padding="4" Command="{Binding Capture}" CommandParameter="{x:Static models:Shortcuts+SC_Type.SC_Type_Hit}" Text="{Binding Source={RelativeSource AncestorType={x:Type local:SettingsViewModel}},Path=ShortcutHitRecordAction, Mode=OneWay}" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Entry  Grid.Row="0" Grid.Column="3" Margin="0" IsEnabled="False" Text="{Binding ShortcutHitDescription, Mode=OneWay}" HorizontalOptions="FillAndExpand" VerticalOptions="Center" BackgroundColor="LightSkyBlue" />
                    <Switch Grid.Row="1" Grid.Column="0" Margin="0" IsToggled="{Binding ShortcutHitUndoEnable, Mode=TwoWay}" OnColor="Orange" ThumbColor="Green" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Label  Grid.Row="1" Grid.Column="1" Margin="0" Text="Hit -1 (boss):" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Button Grid.Row="1" Grid.Column="2" Margin="0" Padding="4" Command="{Binding Capture}" CommandParameter="{x:Static models:Shortcuts+SC_Type.SC_Type_HitUndo}" Text="{Binding Source={RelativeSource AncestorType={x:Type local:SettingsViewModel}},Path=ShortcutHitUndoRecordAction, Mode=OneWay}" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Entry  Grid.Row="1" Grid.Column="3" Margin="0" IsEnabled="False" Text="{Binding ShortcutHitUndoDescription, Mode=OneWay}" HorizontalOptions="FillAndExpand" VerticalOptions="Center" BackgroundColor="WhiteSmoke" />

                    <Switch Grid.Row="2" Grid.Column="0" Margin="0" IsToggled="{Binding ShortcutWayHitEnable, Mode=TwoWay}" OnColor="Orange" ThumbColor="Green" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Label  Grid.Row="2" Grid.Column="1" Margin="0" Text="Hit +1 (way):" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Button Grid.Row="2" Grid.Column="2" Margin="0" Padding="4" Command="{Binding Capture}" CommandParameter="{x:Static models:Shortcuts+SC_Type.SC_Type_WayHit}" Text="{Binding Source={RelativeSource AncestorType={x:Type local:SettingsViewModel}},Path=ShortcutWayHitRecordAction, Mode=OneWay}" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Entry  Grid.Row="2" Grid.Column="3" Margin="0" IsEnabled="False" Text="{Binding ShortcutWayHitDescription, Mode=OneWay}" HorizontalOptions="FillAndExpand" VerticalOptions="Center" BackgroundColor="LightBlue" />
                    <Switch Grid.Row="3" Grid.Column="0" Margin="0" IsToggled="{Binding ShortcutWayHitUndoEnable, Mode=TwoWay}" OnColor="Orange" ThumbColor="Green" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Label  Grid.Row="3" Grid.Column="1" Margin="0" Text="Hit -1 (way)" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Button Grid.Row="3" Grid.Column="2" Margin="0" Padding="4" Command="{Binding Capture}" CommandParameter="{x:Static models:Shortcuts+SC_Type.SC_Type_WayHitUndo}" Text="{Binding Source={RelativeSource AncestorType={x:Type local:SettingsViewModel}},Path=ShortcutWayHitUndoRecordAction, Mode=OneWay}" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Entry  Grid.Row="3" Grid.Column="3" Margin="0" IsEnabled="False" Text="{Binding ShortcutWayHitUndoDescription, Mode=OneWay}" HorizontalOptions="FillAndExpand" VerticalOptions="Center" BackgroundColor="WhiteSmoke" />

                    <Switch Grid.Row="4" Grid.Column="0" Margin="0" IsToggled="{Binding ShortcutSplitEnable, Mode=TwoWay}" OnColor="Orange" ThumbColor="Green" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Label  Grid.Row="4" Grid.Column="1" Margin="0" Text="Next split:" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Button Grid.Row="4" Grid.Column="2" Margin="0" Padding="4" Command="{Binding Capture}" CommandParameter="{x:Static models:Shortcuts+SC_Type.SC_Type_Split}" Text="{Binding Source={RelativeSource AncestorType={x:Type local:SettingsViewModel}},Path=ShortcutSplitRecordAction, Mode=OneWay}" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Entry  Grid.Row="4" Grid.Column="3" Margin="0" IsEnabled="False" Text="{Binding ShortcutSplitDescription, Mode=OneWay}" HorizontalOptions="FillAndExpand" VerticalOptions="Center" BackgroundColor="LightGreen" />
                    <Switch Grid.Row="5" Grid.Column="0" Margin="0" IsToggled="{Binding ShortcutSplitPrevEnable, Mode=TwoWay}" OnColor="Orange" ThumbColor="Green" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Label  Grid.Row="5" Grid.Column="1" Margin="0" Text="Prev split:" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Button Grid.Row="5" Grid.Column="2" Margin="0" Padding="4" Command="{Binding Capture}" CommandParameter="{x:Static models:Shortcuts+SC_Type.SC_Type_SplitPrev}" Text="{Binding Source={RelativeSource AncestorType={x:Type local:SettingsViewModel}},Path=ShortcutSplitPrevRecordAction, Mode=OneWay}" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Entry  Grid.Row="5" Grid.Column="3" Margin="0" IsEnabled="False" Text="{Binding ShortcutSplitPrevDescription, Mode=OneWay}" HorizontalOptions="FillAndExpand" VerticalOptions="Center" BackgroundColor="WhiteSmoke" />

                    <Switch Grid.Row="6" Grid.Column="0" Margin="0" IsToggled="{Binding ShortcutPBEnable, Mode=TwoWay}" OnColor="Orange" ThumbColor="Green" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Label  Grid.Row="6" Grid.Column="1" Margin="0" Text="Set PB:" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Button Grid.Row="6" Grid.Column="2" Margin="0" Padding="4" Command="{Binding Capture}" CommandParameter="{x:Static models:Shortcuts+SC_Type.SC_Type_PB}" Text="{Binding Source={RelativeSource AncestorType={x:Type local:SettingsViewModel}},Path=ShortcutPBRecordAction, Mode=OneWay}" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Entry  Grid.Row="6" Grid.Column="3" Margin="0" IsEnabled="False" Text="{Binding ShortcutPBDescription, Mode=OneWay}" HorizontalOptions="FillAndExpand" VerticalOptions="Center" BackgroundColor="Tan" />
                    <Switch Grid.Row="7" Grid.Column="0" Margin="0" IsToggled="{Binding ShortcutResetEnable, Mode=TwoWay}" OnColor="Orange" ThumbColor="Green" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Label  Grid.Row="7" Grid.Column="1" Margin="0" Text="Reset:" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Button Grid.Row="7" Grid.Column="2" Margin="0" Padding="4" Command="{Binding Capture}" CommandParameter="{x:Static models:Shortcuts+SC_Type.SC_Type_Reset}" Text="{Binding Source={RelativeSource AncestorType={x:Type local:SettingsViewModel}},Path=ShortcutResetRecordAction, Mode=OneWay}" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Entry  Grid.Row="7" Grid.Column="3" Margin="0" IsEnabled="False" Text="{Binding ShortcutResetDescription, Mode=OneWay}" HorizontalOptions="FillAndExpand" VerticalOptions="Center" BackgroundColor="IndianRed" />

                    <Switch Grid.Row="8" Grid.Column="0" Margin="0" IsToggled="{Binding ShortcutTimerStartEnable, Mode=TwoWay}" OnColor="Orange" ThumbColor="Green" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Label  Grid.Row="8" Grid.Column="1" Margin="0" Text="Start timer:" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Button Grid.Row="8" Grid.Column="2" Margin="0" Padding="4" Command="{Binding Capture}" CommandParameter="{x:Static models:Shortcuts+SC_Type.SC_Type_TimerStart}" Text="{Binding Source={RelativeSource AncestorType={x:Type local:SettingsViewModel}},Path=ShortcutTimerStartRecordAction, Mode=OneWay}" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Entry  Grid.Row="8" Grid.Column="3" Margin="0" IsEnabled="False" Text="{Binding ShortcutTimerStartDescription, Mode=OneWay}" HorizontalOptions="FillAndExpand" VerticalOptions="Center" BackgroundColor="Gold" />
                    <Switch Grid.Row="9" Grid.Column="0" Margin="0" IsToggled="{Binding ShortcutTimerStopEnable, Mode=TwoWay}" OnColor="Orange" ThumbColor="Green" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Label  Grid.Row="9" Grid.Column="1" Margin="0" Text="Stop timer" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Button Grid.Row="9" Grid.Column="2" Margin="0" Padding="4" Command="{Binding Capture}" CommandParameter="{x:Static models:Shortcuts+SC_Type.SC_Type_TimerStop}" Text="{Binding Source={RelativeSource AncestorType={x:Type local:SettingsViewModel}},Path=ShortcutTimerStopRecordAction, Mode=OneWay}" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Entry  Grid.Row="9" Grid.Column="3" Margin="0" IsEnabled="False" Text="{Binding ShortcutTimerStopDescription, Mode=OneWay}" HorizontalOptions="FillAndExpand" VerticalOptions="Center" BackgroundColor="Gold" />
                </Grid>

                <Label HorizontalOptions="StartAndExpand" Text="Select method of global hotkey registration (changing needs restart of application):" />
                <Label HorizontalOptions="StartAndExpand" Text="Global hot keys not supported in this version!" TextColor="Red"
                       IsVisible="{Binding Source={x:Static common:Statics.GlobalHotKeySupport}, Converter={common:NegateBoolConverter}, Mode=OneTime}"/>
                <Grid Padding="0" Margin="10,0,10,0" RowSpacing="4" ColumnSpacing="6" HorizontalOptions="FillAndExpand"
                      IsEnabled="{x:Static common:Statics.GlobalHotKeySupport, Mode=OneTime}">
                    <!-- TODO: IsEnabled is barely visible with WPF! -->
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="18" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <RelativeLayout Grid.Row="0" Grid.Column="0" Margin="0" HeightRequest="18" BackgroundColor="{AppThemeBinding Default={StaticResource ImageButtonBackgroundLight}, Dark={StaticResource ImageButtonBackgroundDark}}" HorizontalOptions="Start" VerticalOptions="Start">
                        <Image Source="{common:ImageFromResource Resource=HitCounterManager.Resources.Images.icons8-information-18.png}" >
                            <Image.GestureRecognizers>
                                <TapGestureRecognizer Command="{Binding ToggleShowInfo}" CommandParameter="RadioHotKeyMethod_Sync" NumberOfTapsRequired="1" />
                            </Image.GestureRecognizers>
                        </Image>
                    </RelativeLayout>
                    <Switch Grid.Row="0" Grid.Column="1" Margin="0" IsToggled="{Binding RadioHotKeyMethod_Sync, Mode=TwoWay}" OnColor="Orange" ThumbColor="Green" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Label  Grid.Row="0" Grid.Column="2" Margin="0" Text="Synchronous - System hotkey registration" HorizontalOptions="Start" VerticalOptions="Center" />
                    <!-- Workaround: GTK is failing to use inherited color, so it is applied manually here -->
                    <Frame  Grid.Row="1" Grid.Column="0" Margin="0" Grid.ColumnSpan="3" OutlineColor="Accent" Padding="{OnPlatform 8, WPF=0}" HorizontalOptions="FillAndExpand" VerticalOptions="StartAndExpand"
                            IsVisible="{Binding ShowInfo[RadioHotKeyMethod_Sync].Value, Mode=OneWay}"
                            BackgroundColor="{Binding Source={RelativeSource AncestorType={x:Type ContentPage}},Path=BackgroundColor, Mode=OneWay}">
                        <Label Padding="{OnPlatform 0, WPF=8}" HorizontalOptions="FillAndExpand" VerticalOptions="CenterAndExpand">
                            <Label.FormattedText>
                                <FormattedString>
                                    <Span>* This is a synchronous method as it uses the RegisterHotKey function (Windows API).
* Only when Windows detects a hotkey, a notification to the application is sent, therefore the performance impact is at its minimum.
* The privilege level must at least be on the same level as the application that is sending the notification. This means if you run the game as administratior you most likely have to run the HitCounterManager as administrator, too.
* Downside: It may happen that an applications can "eat" the keys presses and therefore no notification will be sent.</Span>
                                </FormattedString>
                            </Label.FormattedText>
                        </Label>
                    </Frame>
                    <RelativeLayout Grid.Row="2" Grid.Column="0" Margin="0" HeightRequest="18" BackgroundColor="{AppThemeBinding Default={StaticResource ImageButtonBackgroundLight}, Dark={StaticResource ImageButtonBackgroundDark}}" HorizontalOptions="Start" VerticalOptions="Start">
                        <Image Source="{common:ImageFromResource Resource=HitCounterManager.Resources.Images.icons8-information-18.png}" >
                            <Image.GestureRecognizers>
                                <TapGestureRecognizer Command="{Binding ToggleShowInfo}" CommandParameter="RadioHotKeyMethod_Async" NumberOfTapsRequired="1" />
                            </Image.GestureRecognizers>
                        </Image>
                    </RelativeLayout>
                    <Switch Grid.Row="2" Grid.Column="1" Margin="0" IsToggled="{Binding RadioHotKeyMethod_Async, Mode=TwoWay}" OnColor="Orange" ThumbColor="Green" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Label  Grid.Row="2" Grid.Column="2" Margin="0" Text="Asynchronous - Polling keyboard keys" HorizontalOptions="Start" VerticalOptions="Center" />
                    <!-- Workaround: GTK is failing to use inherited color, so it is applied manually here -->
                    <Frame  Grid.Row="3" Grid.Column="0" Margin="0" Grid.ColumnSpan="3" OutlineColor="Accent" Padding="{OnPlatform 8, WPF=0}" HorizontalOptions="FillAndExpand" VerticalOptions="StartAndExpand"
                            IsVisible="{Binding ShowInfo[RadioHotKeyMethod_Async].Value, Mode=OneWay}"
                            BackgroundColor="{Binding Source={RelativeSource AncestorType={x:Type ContentPage}},Path=BackgroundColor, Mode=OneWay}">
                        <Label Padding="{OnPlatform 0, WPF=8}" HorizontalOptions="FillAndExpand" VerticalOptions="CenterAndExpand">
                            <Label.FormattedText>
                                <FormattedString>
                                    <Span>* This is an asynchronous method as it periodically checks the keyboard key presses using the GetAsyncKeyState function (Windows API).
* This means the application has to check all the relevant keys in around every 20 milliseconds. This brings a slight performance drawback.
* This method checks a key directly, so another application cannot interfere a hotkey detection.
* Downside: Very short software generated hotkey events may be missed due to the polling interval.</Span>
                                </FormattedString>
                            </Label.FormattedText>
                        </Label>
                    </Frame>
                    <RelativeLayout Grid.Row="4" Grid.Column="0" Margin="0" HeightRequest="18" BackgroundColor="{AppThemeBinding Default={StaticResource ImageButtonBackgroundLight}, Dark={StaticResource ImageButtonBackgroundDark}}" HorizontalOptions="Start" VerticalOptions="Start">
                        <Image Source="{common:ImageFromResource Resource=HitCounterManager.Resources.Images.icons8-information-18.png}" >
                            <Image.GestureRecognizers>
                                <TapGestureRecognizer Command="{Binding ToggleShowInfo}" CommandParameter="RadioHotKeyMethod_LLKb" NumberOfTapsRequired="1" />
                            </Image.GestureRecognizers>
                        </Image>
                    </RelativeLayout>
                    <Switch Grid.Row="4" Grid.Column="1" Margin="0" IsToggled="{Binding RadioHotKeyMethod_LLKb, Mode=TwoWay}" OnColor="Orange" ThumbColor="Green" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Label  Grid.Row="4" Grid.Column="2" Margin="0" Text="Synchronous - Low level keyboard hook (Recommended)" HorizontalOptions="Start" VerticalOptions="Center" />
                    <!-- Workaround: GTK is failing to use inherited color, so it is applied manually here -->
                    <Frame  Grid.Row="5" Grid.Column="0" Margin="0" Grid.ColumnSpan="3" OutlineColor="Accent" Padding="{OnPlatform 8, WPF=0}" HorizontalOptions="FillAndExpand" VerticalOptions="StartAndExpand"
                            IsVisible="{Binding ShowInfo[RadioHotKeyMethod_LLKb].Value, Mode=OneWay}"
                            BackgroundColor="{Binding Source={RelativeSource AncestorType={x:Type ContentPage}},Path=BackgroundColor, Mode=OneWay}">
                        <Label Padding="{OnPlatform 0, WPF=8}" HorizontalOptions="FillAndExpand" VerticalOptions="CenterAndExpand">
                            <Label.FormattedText>
                                <FormattedString>
                                    <Span>* This is a synchronous method as it uses the WH_KEYBOARD_LL hook via SetWindowsHookEx function (Windows API).
* Even a software generated key that is set and released at the same time (yes, at the exact same time due to message buffering) can be detected this way.
* Downside: Windows will notify the application for every single key state change, which brings a slight performance impact. But more importantly this detection is based on a global hook chain, so before the key press reaches the actual game, the key will also be processed by the HitCounterManager. Therefore you will get an input lag of probably a few nano seconds (depending on the processor). This is why Microsoft stated that this method should be used for debugging but not for productive environments.</Span>
                                </FormattedString>
                            </Label.FormattedText>
                        </Label>
                    </Frame>
                </Grid>

                <!-- ================== -->
                <!-- ================== -->
                <!-- ================== -->

                <!-- Workaround: GTK is failing to use inherited color, so it is applied manually here -->
                <Frame BackgroundColor="#CC6600" OutlineColor="#CC6600" Padding="{OnPlatform 8, WPF=0}" HorizontalOptions="FillAndExpand" VerticalOptions="StartAndExpand" >
                    <Label Padding="{OnPlatform 0, WPF=8}" HorizontalOptions="CenterAndExpand" Text="STYLE" FontAttributes="Bold" FontFamily="Arial" FontSize="{OnPlatform 14, GTK=12}" />
                </Frame>

                <Label HorizontalOptions="StartAndExpand" Text="Sections" />
                <Grid Padding="0" Margin="10,0,10,0" RowSpacing="4" ColumnSpacing="6" HorizontalOptions="FillAndExpand">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="18" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <RelativeLayout Grid.Row="0" Grid.Column="0" Margin="0" HeightRequest="18" BackgroundColor="{AppThemeBinding Default={StaticResource ImageButtonBackgroundLight}, Dark={StaticResource ImageButtonBackgroundDark}}" HorizontalOptions="Start" VerticalOptions="Start">
                        <Image Source="{common:ImageFromResource Resource=HitCounterManager.Resources.Images.icons8-information-18.png}" >
                            <Image.GestureRecognizers>
                                <TapGestureRecognizer Command="{Binding ToggleShowInfo}" CommandParameter="ShowAttemptsCounter" NumberOfTapsRequired="1" />
                            </Image.GestureRecognizers>
                        </Image>
                    </RelativeLayout>
                    <Switch Grid.Row="0" Grid.Column="1" Margin="0" IsToggled="{Binding ShowAttemptsCounter, Mode=TwoWay}" OnColor="Orange" ThumbColor="Green" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Label  Grid.Row="0" Grid.Column="2" Margin="0" Text="Run number" HorizontalOptions="Start" VerticalOptions="Center" />
                    <!-- Workaround: GTK is failing to use inherited color, so it is applied manually here -->
                    <Frame  Grid.Row="1" Grid.Column="0" Margin="0" Grid.ColumnSpan="3" OutlineColor="Accent" Padding="{OnPlatform 8, WPF=0}" HorizontalOptions="FillAndExpand" VerticalOptions="StartAndExpand"
                            IsVisible="{Binding ShowInfo[ShowAttemptsCounter].Value, Mode=OneWay}"
                            BackgroundColor="{Binding Source={RelativeSource AncestorType={x:Type ContentPage}},Path=BackgroundColor, Mode=OneWay}">
                        <Label Padding="{OnPlatform 0, WPF=8}" Text="Show/Hide hits column (either boss and way hits combined or separate)" HorizontalOptions="FillAndExpand" VerticalOptions="CenterAndExpand">
                            <Label.FormattedText>
                                <FormattedString>
                                    <Span>Show/Hide how many runs have been started yet</Span>
                                </FormattedString>
                            </Label.FormattedText>
                        </Label>
                    </Frame>
                    <RelativeLayout Grid.Row="2" Grid.Column="0" Margin="0" HeightRequest="18" BackgroundColor="{AppThemeBinding Default={StaticResource ImageButtonBackgroundLight}, Dark={StaticResource ImageButtonBackgroundDark}}" HorizontalOptions="Start" VerticalOptions="Start">
                        <Image Source="{common:ImageFromResource Resource=HitCounterManager.Resources.Images.icons8-information-18.png}" >
                            <Image.GestureRecognizers>
                                <TapGestureRecognizer Command="{Binding ToggleShowInfo}" CommandParameter="ShowHeadline" NumberOfTapsRequired="1" />
                            </Image.GestureRecognizers>
                        </Image>
                    </RelativeLayout>
                    <Switch Grid.Row="2" Grid.Column="1" Margin="0" IsToggled="{Binding ShowHeadline, Mode=TwoWay}" OnColor="Orange" ThumbColor="Green" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Label  Grid.Row="2" Grid.Column="2" Margin="0" Text="Column heading" HorizontalOptions="Start" VerticalOptions="Center" />
                    <!-- Workaround: GTK is failing to use inherited color, so it is applied manually here -->
                    <Frame  Grid.Row="3" Grid.Column="0" Margin="0" Grid.ColumnSpan="3" OutlineColor="Accent" Padding="{OnPlatform 8, WPF=0}" HorizontalOptions="FillAndExpand" VerticalOptions="StartAndExpand"
                            IsVisible="{Binding ShowInfo[ShowHeadline].Value, Mode=OneWay}"
                            BackgroundColor="{Binding Source={RelativeSource AncestorType={x:Type ContentPage}},Path=BackgroundColor, Mode=OneWay}">
                        <Label Padding="{OnPlatform 0, WPF=8}" Text="Show/Hide hits column (either boss and way hits combined or separate)" HorizontalOptions="FillAndExpand" VerticalOptions="CenterAndExpand">
                            <Label.FormattedText>
                                <FormattedString>
                                    <Span>Show/Hide the headlines of the columns</Span>
                                </FormattedString>
                            </Label.FormattedText>
                        </Label>
                    </Frame>
                    <RelativeLayout Grid.Row="4" Grid.Column="0" Margin="0" HeightRequest="18" BackgroundColor="{AppThemeBinding Default={StaticResource ImageButtonBackgroundLight}, Dark={StaticResource ImageButtonBackgroundDark}}" HorizontalOptions="Start" VerticalOptions="Start">
                        <Image Source="{common:ImageFromResource Resource=HitCounterManager.Resources.Images.icons8-information-18.png}" >
                            <Image.GestureRecognizers>
                                <TapGestureRecognizer Command="{Binding ToggleShowInfo}" CommandParameter="ShowProgressBar" NumberOfTapsRequired="1" />
                            </Image.GestureRecognizers>
                        </Image>
                    </RelativeLayout>
                    <Switch Grid.Row="4" Grid.Column="1" Margin="0" IsToggled="{Binding ShowProgressBar, Mode=TwoWay}" OnColor="Orange" ThumbColor="Green" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Label  Grid.Row="4" Grid.Column="2" Margin="0" Text="Progress bar" HorizontalOptions="Start" VerticalOptions="Center" />
                    <!-- Workaround: GTK is failing to use inherited color, so it is applied manually here -->
                    <Frame  Grid.Row="5" Grid.Column="0" Margin="0" Grid.ColumnSpan="3" OutlineColor="Accent" Padding="{OnPlatform 8, WPF=0}" HorizontalOptions="FillAndExpand" VerticalOptions="StartAndExpand"
                            IsVisible="{Binding ShowInfo[ShowProgressBar].Value, Mode=OneWay}"
                            BackgroundColor="{Binding Source={RelativeSource AncestorType={x:Type ContentPage}},Path=BackgroundColor, Mode=OneWay}">
                        <Label Padding="{OnPlatform 0, WPF=8}" Text="Show/Hide hits column (either boss and way hits combined or separate)" HorizontalOptions="FillAndExpand" VerticalOptions="CenterAndExpand">
                            <Label.FormattedText>
                                <FormattedString>
                                    <Span>Show/Hide the progress bar to graphically represent the run's progress</Span>
                                </FormattedString>
                            </Label.FormattedText>
                        </Label>
                    </Frame>
                    <RelativeLayout Grid.Row="6" Grid.Column="0" Margin="0" HeightRequest="18" BackgroundColor="{AppThemeBinding Default={StaticResource ImageButtonBackgroundLight}, Dark={StaticResource ImageButtonBackgroundDark}}" HorizontalOptions="Start" VerticalOptions="Start">
                        <Image Source="{common:ImageFromResource Resource=HitCounterManager.Resources.Images.icons8-information-18.png}" >
                            <Image.GestureRecognizers>
                                <TapGestureRecognizer Command="{Binding ToggleShowInfo}" CommandParameter="ShowFooter" NumberOfTapsRequired="1" />
                            </Image.GestureRecognizers>
                        </Image>
                    </RelativeLayout>
                    <Switch Grid.Row="6" Grid.Column="1" Margin="0" IsToggled="{Binding ShowFooter, Mode=TwoWay}" OnColor="Orange" ThumbColor="Green" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Label  Grid.Row="6" Grid.Column="2" Margin="0" Text="Totals" HorizontalOptions="Start" VerticalOptions="Center" />
                    <!-- Workaround: GTK is failing to use inherited color, so it is applied manually here -->
                    <Frame  Grid.Row="7" Grid.Column="0" Margin="0" Grid.ColumnSpan="3" OutlineColor="Accent" Padding="{OnPlatform 8, WPF=0}" HorizontalOptions="FillAndExpand" VerticalOptions="StartAndExpand"
                            IsVisible="{Binding ShowInfo[ShowFooter].Value, Mode=OneWay}"
                            BackgroundColor="{Binding Source={RelativeSource AncestorType={x:Type ContentPage}},Path=BackgroundColor, Mode=OneWay}">
                        <Label Padding="{OnPlatform 0, WPF=8}" Text="Show/Hide hits column (either boss and way hits combined or separate)" HorizontalOptions="FillAndExpand" VerticalOptions="CenterAndExpand">
                            <Label.FormattedText>
                                <FormattedString>
                                    <Span>Show/Hide the totals for each column (in the footer)</Span>
                                </FormattedString>
                            </Label.FormattedText>
                        </Label>
                    </Frame>
                    <RelativeLayout Grid.Row="8" Grid.Column="0" Margin="0" HeightRequest="18" BackgroundColor="{AppThemeBinding Default={StaticResource ImageButtonBackgroundLight}, Dark={StaticResource ImageButtonBackgroundDark}}" HorizontalOptions="Start" VerticalOptions="Start">
                        <Image Source="{common:ImageFromResource Resource=HitCounterManager.Resources.Images.icons8-information-18.png}" >
                            <Image.GestureRecognizers>
                                <TapGestureRecognizer Command="{Binding ToggleShowInfo}" CommandParameter="ShowTimeFooter" NumberOfTapsRequired="1" />
                            </Image.GestureRecognizers>
                        </Image>
                    </RelativeLayout>
                    <Switch Grid.Row="8" Grid.Column="1" Margin="0" IsToggled="{Binding ShowTimeFooter, Mode=TwoWay}" OnColor="Orange" ThumbColor="Green" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Label  Grid.Row="8" Grid.Column="2" Margin="0" Text="Time" HorizontalOptions="Start" VerticalOptions="Center" />
                    <!-- Workaround: GTK is failing to use inherited color, so it is applied manually here -->
                    <Frame  Grid.Row="9" Grid.Column="0" Margin="0" Grid.ColumnSpan="3" OutlineColor="Accent" Padding="{OnPlatform 8, WPF=0}" HorizontalOptions="FillAndExpand" VerticalOptions="StartAndExpand"
                            IsVisible="{Binding ShowInfo[ShowTimeFooter].Value, Mode=OneWay}"
                            BackgroundColor="{Binding Source={RelativeSource AncestorType={x:Type ContentPage}},Path=BackgroundColor, Mode=OneWay}">
                        <Label Padding="{OnPlatform 0, WPF=8}" Text="Show/Hide hits column (either boss and way hits combined or separate)" HorizontalOptions="FillAndExpand" VerticalOptions="CenterAndExpand">
                            <Label.FormattedText>
                                <FormattedString>
                                    <Span>Show/Hide full time of the current run (in the footer)</Span>
                                </FormattedString>
                            </Label.FormattedText>
                        </Label>
                    </Frame>
                </Grid>

                <Label HorizontalOptions="StartAndExpand" Text="Columns" />
                <Grid Padding="0" Margin="10,0,10,0" RowSpacing="4" ColumnSpacing="6" HorizontalOptions="FillAndExpand">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="18" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <RelativeLayout Grid.Row="0" Grid.Column="0" Margin="0" HeightRequest="18" BackgroundColor="{AppThemeBinding Default={StaticResource ImageButtonBackgroundLight}, Dark={StaticResource ImageButtonBackgroundDark}}" HorizontalOptions="Start" VerticalOptions="Start">
                        <Image Source="{common:ImageFromResource Resource=HitCounterManager.Resources.Images.icons8-information-18.png}" >
                            <Image.GestureRecognizers>
                                <TapGestureRecognizer Command="{Binding ToggleShowInfo}" CommandParameter="ShowHits" NumberOfTapsRequired="1" />
                            </Image.GestureRecognizers>
                        </Image>
                    </RelativeLayout>
                    <Switch Grid.Row="0" Grid.Column="1" Margin="0" IsToggled="{Binding ShowHits, Mode=TwoWay}" OnColor="Orange" ThumbColor="Green" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Label  Grid.Row="0" Grid.Column="2" Margin="0" Text="Hits" HorizontalOptions="Start" VerticalOptions="Center" />
                    <!-- Workaround: GTK is failing to use inherited color, so it is applied manually here -->
                    <Frame  Grid.Row="1" Grid.Column="0" Margin="0" Grid.ColumnSpan="3" OutlineColor="Accent" Padding="{OnPlatform 8, WPF=0}" HorizontalOptions="FillAndExpand" VerticalOptions="StartAndExpand"
                            IsVisible="{Binding ShowInfo[ShowHits].Value, Mode=OneWay}"
                            BackgroundColor="{Binding Source={RelativeSource AncestorType={x:Type ContentPage}},Path=BackgroundColor, Mode=OneWay}">
                        <Label Padding="{OnPlatform 0, WPF=8}" Text="Show/Hide hits column (either boss and way hits combined or separate)" HorizontalOptions="FillAndExpand" VerticalOptions="CenterAndExpand">
                            <Label.FormattedText>
                                <FormattedString>
                                    <Span>Show/Hide hits column(s)
Can be configured to show boss and way hits as a combined value in a single column or separately in two columns</Span>
                                </FormattedString>
                            </Label.FormattedText>
                        </Label>
                    </Frame>
                    <RelativeLayout Grid.Row="2" Grid.Column="0" Margin="0" HeightRequest="18" BackgroundColor="{AppThemeBinding Default={StaticResource ImageButtonBackgroundLight}, Dark={StaticResource ImageButtonBackgroundDark}}" HorizontalOptions="Start" VerticalOptions="Start">
                        <Image Source="{common:ImageFromResource Resource=HitCounterManager.Resources.Images.icons8-information-18.png}" >
                            <Image.GestureRecognizers>
                                <TapGestureRecognizer Command="{Binding ToggleShowInfo}" CommandParameter="ShowHitsCombined" NumberOfTapsRequired="1" />
                            </Image.GestureRecognizers>
                        </Image>
                    </RelativeLayout>
                    <Switch Grid.Row="2" Grid.Column="1" Margin="0" IsToggled="{Binding ShowHitsCombined, Mode=TwoWay}" OnColor="Orange" ThumbColor="Green" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Label  Grid.Row="2" Grid.Column="2" Margin="0" Text="+ combine boss and way hits" HorizontalOptions="Start" VerticalOptions="Center" />
                    <!-- Workaround: GTK is failing to use inherited color, so it is applied manually here -->
                    <Frame  Grid.Row="3" Grid.Column="0" Margin="0" Grid.ColumnSpan="3" OutlineColor="Accent" Padding="{OnPlatform 8, WPF=0}" HorizontalOptions="FillAndExpand" VerticalOptions="StartAndExpand"
                            IsVisible="{Binding ShowInfo[ShowHitsCombined].Value, Mode=OneWay}"
                            BackgroundColor="{Binding Source={RelativeSource AncestorType={x:Type ContentPage}},Path=BackgroundColor, Mode=OneWay}">
                        <Label Padding="{OnPlatform 0, WPF=8}" HorizontalOptions="FillAndExpand" VerticalOptions="CenterAndExpand">
                            <Label.FormattedText>
                                <FormattedString>
                                    <Span>Checked: The boss and way hits are combined and shown as a single value
Unchecked: The boss and way hits are shown as separate values</Span>
                                </FormattedString>
                            </Label.FormattedText>
                        </Label>
                    </Frame>
                    <RelativeLayout Grid.Row="4" Grid.Column="0" Margin="0" HeightRequest="18" BackgroundColor="{AppThemeBinding Default={StaticResource ImageButtonBackgroundLight}, Dark={StaticResource ImageButtonBackgroundDark}}" HorizontalOptions="Start" VerticalOptions="Start">
                        <Image Source="{common:ImageFromResource Resource=HitCounterManager.Resources.Images.icons8-information-18.png}" >
                            <Image.GestureRecognizers>
                                <TapGestureRecognizer Command="{Binding ToggleShowInfo}" CommandParameter="ShowDiff" NumberOfTapsRequired="1" />
                            </Image.GestureRecognizers>
                        </Image>
                    </RelativeLayout>
                    <Switch Grid.Row="4" Grid.Column="1" Margin="0" IsToggled="{Binding ShowDiff, Mode=TwoWay}" OnColor="Orange" ThumbColor="Green" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Label  Grid.Row="4" Grid.Column="2" Margin="0" Text="Difference" HorizontalOptions="Start" VerticalOptions="Center" />
                    <!-- Workaround: GTK is failing to use inherited color, so it is applied manually here -->
                    <Frame  Grid.Row="5" Grid.Column="0" Margin="0" Grid.ColumnSpan="3" OutlineColor="Accent" Padding="{OnPlatform 8, WPF=0}" HorizontalOptions="FillAndExpand" VerticalOptions="StartAndExpand"
                            IsVisible="{Binding ShowInfo[ShowDiff].Value, Mode=OneWay}"
                            BackgroundColor="{Binding Source={RelativeSource AncestorType={x:Type ContentPage}},Path=BackgroundColor, Mode=OneWay}">
                        <Label Padding="{OnPlatform 0, WPF=8}" Text="Show/Hide difference between personal best and current hit counts" HorizontalOptions="FillAndExpand" VerticalOptions="CenterAndExpand" />
                    </Frame>
                    <RelativeLayout Grid.Row="6" Grid.Column="0" Margin="0" HeightRequest="18" BackgroundColor="{AppThemeBinding Default={StaticResource ImageButtonBackgroundLight}, Dark={StaticResource ImageButtonBackgroundDark}}" HorizontalOptions="Start" VerticalOptions="Start">
                        <Image Source="{common:ImageFromResource Resource=HitCounterManager.Resources.Images.icons8-information-18.png}" >
                            <Image.GestureRecognizers>
                                <TapGestureRecognizer Command="{Binding ToggleShowInfo}" CommandParameter="ShowPB" NumberOfTapsRequired="1" />
                            </Image.GestureRecognizers>
                        </Image>
                    </RelativeLayout>
                    <Switch Grid.Row="6" Grid.Column="1" Margin="0" IsToggled="{Binding ShowPB, Mode=TwoWay}" OnColor="Orange" ThumbColor="Green" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Label  Grid.Row="6" Grid.Column="2" Margin="0" Text="PB (personal best)" HorizontalOptions="Start" VerticalOptions="Center" />
                    <!-- Workaround: GTK is failing to use inherited color, so it is applied manually here -->
                    <Frame  Grid.Row="7" Grid.Column="0" Margin="0" Grid.ColumnSpan="3" OutlineColor="Accent" Padding="{OnPlatform 8, WPF=0}" HorizontalOptions="FillAndExpand" VerticalOptions="StartAndExpand"
                            IsVisible="{Binding ShowInfo[ShowPB].Value, Mode=OneWay}"
                            BackgroundColor="{Binding Source={RelativeSource AncestorType={x:Type ContentPage}},Path=BackgroundColor, Mode=OneWay}">
                        <Label Padding="{OnPlatform 0, WPF=8}" HorizontalOptions="FillAndExpand" VerticalOptions="CenterAndExpand">
                            <Label.FormattedText>
                                <FormattedString>
                                    <Span>Show personal best hit counts
Can be configured to additionally show the cumulative sum of PB hits up to each split.
Allows quick comparison with the current hit count total.</Span>
                                </FormattedString>
                            </Label.FormattedText>
                        </Label>
                    </Frame>
                    <RelativeLayout Grid.Row="8" Grid.Column="0" Margin="0" HeightRequest="18" BackgroundColor="{AppThemeBinding Default={StaticResource ImageButtonBackgroundLight}, Dark={StaticResource ImageButtonBackgroundDark}}" HorizontalOptions="Start" VerticalOptions="Start">
                        <Image Source="{common:ImageFromResource Resource=HitCounterManager.Resources.Images.icons8-information-18.png}" >
                            <Image.GestureRecognizers>
                                <TapGestureRecognizer Command="{Binding ToggleShowInfo}" CommandParameter="ShowPBTotals" NumberOfTapsRequired="1" />
                            </Image.GestureRecognizers>
                        </Image>
                    </RelativeLayout>
                    <Switch Grid.Row="8" Grid.Column="1" Margin="0" IsToggled="{Binding ShowPBTotals, Mode=TwoWay}" OnColor="Orange" ThumbColor="Green" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Label  Grid.Row="8" Grid.Column="2" Margin="0" Text="+ show cumulative totals" HorizontalOptions="Start" VerticalOptions="Center" />
                    <!-- Workaround: GTK is failing to use inherited color, so it is applied manually here -->
                    <Frame  Grid.Row="9" Grid.Column="0" Margin="0" Grid.ColumnSpan="3" OutlineColor="Accent" Padding="{OnPlatform 8, WPF=0}" HorizontalOptions="FillAndExpand" VerticalOptions="StartAndExpand"
                            IsVisible="{Binding ShowInfo[ShowPBTotals].Value, Mode=OneWay}"
                            BackgroundColor="{Binding Source={RelativeSource AncestorType={x:Type ContentPage}},Path=BackgroundColor, Mode=OneWay}">
                        <Label Padding="{OnPlatform 0, WPF=8}" HorizontalOptions="FillAndExpand" VerticalOptions="CenterAndExpand">
                            <Label.FormattedText>
                                <FormattedString>
                                    <Span>Show personal best hit count totals
Shows the cumulative sum of PB hits up to each split next to the PB hits of the current split.
Allows quick comparison with the current hit count total.</Span>
                                </FormattedString>
                            </Label.FormattedText>
                        </Label>
                    </Frame>
                    <RelativeLayout Grid.Row="10" Grid.Column="0" Margin="0" HeightRequest="18" BackgroundColor="{AppThemeBinding Default={StaticResource ImageButtonBackgroundLight}, Dark={StaticResource ImageButtonBackgroundDark}}" HorizontalOptions="Start" VerticalOptions="Start">
                        <Image Source="{common:ImageFromResource Resource=HitCounterManager.Resources.Images.icons8-information-18.png}" >
                            <Image.GestureRecognizers>
                                <TapGestureRecognizer Command="{Binding ToggleShowInfo}" CommandParameter="ShowTimeCurrent" NumberOfTapsRequired="1" />
                            </Image.GestureRecognizers>
                        </Image>
                    </RelativeLayout>
                    <Switch Grid.Row="10" Grid.Column="1" Margin="0" IsToggled="{Binding ShowTimeCurrent, Mode=TwoWay}" OnColor="Orange" ThumbColor="Green" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Label  Grid.Row="10" Grid.Column="2" Margin="0" Text="Split time" HorizontalOptions="Start" VerticalOptions="Center" />
                    <!-- Workaround: GTK is failing to use inherited color, so it is applied manually here -->
                    <Frame  Grid.Row="11" Grid.Column="0" Margin="0" Grid.ColumnSpan="3" OutlineColor="Accent" Padding="{OnPlatform 8, WPF=0}" HorizontalOptions="FillAndExpand" VerticalOptions="StartAndExpand"
                            IsVisible="{Binding ShowInfo[ShowTimeCurrent].Value, Mode=OneWay}"
                            BackgroundColor="{Binding Source={RelativeSource AncestorType={x:Type ContentPage}},Path=BackgroundColor, Mode=OneWay}">
                        <Label Padding="{OnPlatform 0, WPF=8}" Text="Show current split times" HorizontalOptions="FillAndExpand" VerticalOptions="CenterAndExpand" />
                    </Frame>
                    <RelativeLayout Grid.Row="12" Grid.Column="0" Margin="0" HeightRequest="18" BackgroundColor="{AppThemeBinding Default={StaticResource ImageButtonBackgroundLight}, Dark={StaticResource ImageButtonBackgroundDark}}" HorizontalOptions="Start" VerticalOptions="Start">
                        <Image Source="{common:ImageFromResource Resource=HitCounterManager.Resources.Images.icons8-information-18.png}" >
                            <Image.GestureRecognizers>
                                <TapGestureRecognizer Command="{Binding ToggleShowInfo}" CommandParameter="ShowTimeDiff" NumberOfTapsRequired="1" />
                            </Image.GestureRecognizers>
                        </Image>
                    </RelativeLayout>
                    <Switch Grid.Row="12" Grid.Column="1" Margin="0" IsToggled="{Binding ShowTimeDiff, Mode=TwoWay}" OnColor="Orange" ThumbColor="Green" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Label  Grid.Row="12" Grid.Column="2" Margin="0" Text="Delta time" HorizontalOptions="Start" VerticalOptions="Center" />
                    <!-- Workaround: GTK is failing to use inherited color, so it is applied manually here -->
                    <Frame  Grid.Row="13" Grid.Column="0" Margin="0" Grid.ColumnSpan="3" OutlineColor="Accent" Padding="{OnPlatform 8, WPF=0}" HorizontalOptions="FillAndExpand" VerticalOptions="StartAndExpand"
                            IsVisible="{Binding ShowInfo[ShowTimeDiff].Value, Mode=OneWay}"
                            BackgroundColor="{Binding Source={RelativeSource AncestorType={x:Type ContentPage}},Path=BackgroundColor, Mode=OneWay}">
                        <Label Padding="{OnPlatform 0, WPF=8}" Text="Show difference between personal best time and currenct split time" HorizontalOptions="FillAndExpand" VerticalOptions="CenterAndExpand" />
                    </Frame>
                    <RelativeLayout Grid.Row="14" Grid.Column="0" Margin="0" HeightRequest="18" BackgroundColor="{AppThemeBinding Default={StaticResource ImageButtonBackgroundLight}, Dark={StaticResource ImageButtonBackgroundDark}}" HorizontalOptions="Start" VerticalOptions="Start">
                        <Image Source="{common:ImageFromResource Resource=HitCounterManager.Resources.Images.icons8-information-18.png}" >
                            <Image.GestureRecognizers>
                                <TapGestureRecognizer Command="{Binding ToggleShowInfo}" CommandParameter="ShowTimePB" NumberOfTapsRequired="1" />
                            </Image.GestureRecognizers>
                        </Image>
                    </RelativeLayout>
                    <Switch Grid.Row="14" Grid.Column="1" Margin="0" IsToggled="{Binding ShowTimePB, Mode=TwoWay}" OnColor="Orange" ThumbColor="Green" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Label  Grid.Row="14" Grid.Column="2" Margin="0" Text="PB time" HorizontalOptions="Start" VerticalOptions="Center" />
                    <!-- Workaround: GTK is failing to use inherited color, so it is applied manually here -->
                    <Frame  Grid.Row="15" Grid.Column="0" Margin="0" Grid.ColumnSpan="3" OutlineColor="Accent" Padding="{OnPlatform 8, WPF=0}" HorizontalOptions="FillAndExpand" VerticalOptions="StartAndExpand"
                            IsVisible="{Binding ShowInfo[ShowTimePB].Value, Mode=OneWay}"
                            BackgroundColor="{Binding Source={RelativeSource AncestorType={x:Type ContentPage}},Path=BackgroundColor, Mode=OneWay}">
                        <Label Padding="{OnPlatform 0, WPF=8}" Text="Show personal best times" HorizontalOptions="FillAndExpand" VerticalOptions="CenterAndExpand" />
                    </Frame>
                    <RelativeLayout Grid.Row="16" Grid.Column="0" Margin="0" HeightRequest="18" BackgroundColor="{AppThemeBinding Default={StaticResource ImageButtonBackgroundLight}, Dark={StaticResource ImageButtonBackgroundDark}}" HorizontalOptions="Start" VerticalOptions="Start">
                        <Image Source="{common:ImageFromResource Resource=HitCounterManager.Resources.Images.icons8-information-18.png}" >
                            <Image.GestureRecognizers>
                                <TapGestureRecognizer Command="{Binding ToggleShowInfo}" CommandParameter="ShowSessionProgress" NumberOfTapsRequired="1" />
                            </Image.GestureRecognizers>
                        </Image>
                    </RelativeLayout>
                    <Switch Grid.Row="16" Grid.Column="1" Margin="0" IsToggled="{Binding ShowSessionProgress, Mode=TwoWay}" OnColor="Orange" ThumbColor="Green" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Label  Grid.Row="16" Grid.Column="2" Margin="0" Text="SP and BP (session progress and best progress)" HorizontalOptions="Start" VerticalOptions="Center" />
                    <!-- Workaround: GTK is failing to use inherited color, so it is applied manually here -->
                    <Frame  Grid.Row="17" Grid.Column="0" Margin="0" Grid.ColumnSpan="3" OutlineColor="Accent" Padding="{OnPlatform 8, WPF=0}" HorizontalOptions="FillAndExpand" VerticalOptions="StartAndExpand"
                            IsVisible="{Binding ShowInfo[ShowSessionProgress].Value, Mode=OneWay}"
                            BackgroundColor="{Binding Source={RelativeSource AncestorType={x:Type ContentPage}},Path=BackgroundColor, Mode=OneWay}">
                        <Label Padding="{OnPlatform 0, WPF=8}" Text="" HorizontalOptions="FillAndExpand" VerticalOptions="CenterAndExpand">
                            <Label.FormattedText>
                                <FormattedString>
                                    <Span>Show/Hide the column for the session progress and best progress
The session progress (SP) is represented by a 24 hour clock symbol and marks the farthest reached split per stream session (resets on application start).
The best progress (BP) is represented by a flag symbol and marks the farthest reached split of the best flawless run ever (also known as distance PB).</Span>
                                </FormattedString>
                            </Label.FormattedText>
                        </Label>
                    </Frame>
                </Grid>

                <Label HorizontalOptions="StartAndExpand" Text="Appearance" />
                <Grid Padding="0" Margin="10,0,10,0" RowSpacing="4" ColumnSpacing="6" HorizontalOptions="FillAndExpand">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="18" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <RelativeLayout Grid.Row="0" Grid.Column="0" Margin="0" HeightRequest="18" BackgroundColor="{AppThemeBinding Default={StaticResource ImageButtonBackgroundLight}, Dark={StaticResource ImageButtonBackgroundDark}}" HorizontalOptions="Start" VerticalOptions="Start">
                        <Image Source="{common:ImageFromResource Resource=HitCounterManager.Resources.Images.icons8-information-18.png}" >
                            <Image.GestureRecognizers>
                                <TapGestureRecognizer Command="{Binding ToggleShowInfo}" CommandParameter="ShowNumbers" NumberOfTapsRequired="1" />
                            </Image.GestureRecognizers>
                        </Image>
                    </RelativeLayout>
                    <Switch Grid.Row="0" Grid.Column="1" Margin="0" IsToggled="{Binding ShowNumbers, Mode=TwoWay}" OnColor="Orange" ThumbColor="Green" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Label  Grid.Row="0" Grid.Column="2" Margin="0" Text="Numeric hits (shows images when unchecked)" HorizontalOptions="Start" VerticalOptions="Center" />
                    <!-- Workaround: GTK is failing to use inherited color, so it is applied manually here -->
                    <Frame  Grid.Row="1" Grid.Column="0" Margin="0" Grid.ColumnSpan="3" OutlineColor="Accent" Padding="{OnPlatform 8, WPF=0}" HorizontalOptions="FillAndExpand" VerticalOptions="StartAndExpand"
                            IsVisible="{Binding ShowInfo[ShowNumbers].Value, Mode=OneWay}"
                            BackgroundColor="{Binding Source={RelativeSource AncestorType={x:Type ContentPage}},Path=BackgroundColor, Mode=OneWay}">
                        <Label Padding="{OnPlatform 0, WPF=8}" Text="Show either numeric values (usually during training or routing) or simple images like the check mark and cross." HorizontalOptions="FillAndExpand" VerticalOptions="CenterAndExpand" />
                    </Frame>
                    <RelativeLayout Grid.Row="2" Grid.Column="0" Margin="0" HeightRequest="18" BackgroundColor="{AppThemeBinding Default={StaticResource ImageButtonBackgroundLight}, Dark={StaticResource ImageButtonBackgroundDark}}" HorizontalOptions="Start" VerticalOptions="Start">
                        <Image Source="{common:ImageFromResource Resource=HitCounterManager.Resources.Images.icons8-information-18.png}" >
                            <Image.GestureRecognizers>
                                <TapGestureRecognizer Command="{Binding ToggleShowInfo}" CommandParameter="StyleUseHighContrast" NumberOfTapsRequired="1" />
                            </Image.GestureRecognizers>
                        </Image>
                    </RelativeLayout>
                    <Switch Grid.Row="2" Grid.Column="1" Margin="0" IsToggled="{Binding StyleUseHighContrast, Mode=TwoWay}" OnColor="Orange" ThumbColor="Green" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Label  Grid.Row="2" Grid.Column="2" Margin="0" Text="Solid background (transparent when unchecked)" HorizontalOptions="Start" VerticalOptions="Center" />
                    <!-- Workaround: GTK is failing to use inherited color, so it is applied manually here -->
                    <Frame  Grid.Row="3" Grid.Column="0" Margin="0" Grid.ColumnSpan="3" OutlineColor="Accent" Padding="{OnPlatform 8, WPF=0}" HorizontalOptions="FillAndExpand" VerticalOptions="StartAndExpand"
                            IsVisible="{Binding ShowInfo[StyleUseHighContrast].Value, Mode=OneWay}"
                            BackgroundColor="{Binding Source={RelativeSource AncestorType={x:Type ContentPage}},Path=BackgroundColor, Mode=OneWay}">
                        <Label Padding="{OnPlatform 0, WPF=8}" Text="Adds a solid background color that the text can be read clearly no matter what is shown behind." HorizontalOptions="FillAndExpand" VerticalOptions="CenterAndExpand" />
                    </Frame>
                    <RelativeLayout Grid.Row="4" Grid.Column="0" Margin="0" HeightRequest="18" BackgroundColor="{AppThemeBinding Default={StaticResource ImageButtonBackgroundLight}, Dark={StaticResource ImageButtonBackgroundDark}}" HorizontalOptions="Start" VerticalOptions="Start">
                        <Image Source="{common:ImageFromResource Resource=HitCounterManager.Resources.Images.icons8-information-18.png}" >
                            <Image.GestureRecognizers>
                                <TapGestureRecognizer Command="{Binding ToggleShowInfo}" CommandParameter="StyleUseHighContrastNames" NumberOfTapsRequired="1" />
                            </Image.GestureRecognizers>
                        </Image>
                    </RelativeLayout>
                    <Switch Grid.Row="4" Grid.Column="1" Margin="0" IsToggled="{Binding StyleUseHighContrastNames, Mode=TwoWay}" OnColor="Orange" ThumbColor="Green" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Label  Grid.Row="4" Grid.Column="2" Margin="0" Text="Single-color split names" HorizontalOptions="Start" VerticalOptions="Center" />
                    <!-- Workaround: GTK is failing to use inherited color, so it is applied manually here -->
                    <Frame  Grid.Row="5" Grid.Column="0" Margin="0" Grid.ColumnSpan="3" OutlineColor="Accent" Padding="{OnPlatform 8, WPF=0}" HorizontalOptions="FillAndExpand" VerticalOptions="StartAndExpand"
                            IsVisible="{Binding ShowInfo[StyleUseHighContrastNames].Value, Mode=OneWay}"
                            BackgroundColor="{Binding Source={RelativeSource AncestorType={x:Type ContentPage}},Path=BackgroundColor, Mode=OneWay}">
                        <Label Padding="{OnPlatform 0, WPF=8}" Text="All split names have the same color." HorizontalOptions="FillAndExpand" VerticalOptions="CenterAndExpand" />
                    </Frame>
                    <RelativeLayout Grid.Row="6" Grid.Column="0" Margin="0" HeightRequest="18" BackgroundColor="{AppThemeBinding Default={StaticResource ImageButtonBackgroundLight}, Dark={StaticResource ImageButtonBackgroundDark}}" HorizontalOptions="Start" VerticalOptions="Start">
                        <Image Source="{common:ImageFromResource Resource=HitCounterManager.Resources.Images.icons8-information-18.png}" >
                            <Image.GestureRecognizers>
                                <TapGestureRecognizer Command="{Binding ToggleShowInfo}" CommandParameter="StyleProgressBarColored" NumberOfTapsRequired="1" />
                            </Image.GestureRecognizers>
                        </Image>
                    </RelativeLayout>
                    <Switch Grid.Row="6" Grid.Column="1" Margin="0" IsToggled="{Binding StyleProgressBarColored, Mode=TwoWay}" OnColor="Orange" ThumbColor="Green" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Label  Grid.Row="6" Grid.Column="2" Margin="0" Text="Multicolor progress bar" HorizontalOptions="Start" VerticalOptions="Center" />
                    <!-- Workaround: GTK is failing to use inherited color, so it is applied manually here -->
                    <Frame  Grid.Row="7" Grid.Column="0" Margin="0" Grid.ColumnSpan="3" OutlineColor="Accent" Padding="{OnPlatform 8, WPF=0}" HorizontalOptions="FillAndExpand" VerticalOptions="StartAndExpand"
                            IsVisible="{Binding ShowInfo[StyleProgressBarColored].Value, Mode=OneWay}"
                            BackgroundColor="{Binding Source={RelativeSource AncestorType={x:Type ContentPage}},Path=BackgroundColor, Mode=OneWay}">
                        <Label Padding="{OnPlatform 0, WPF=8}" Text="The splits will be represented with their current colors on the progress bar." HorizontalOptions="FillAndExpand" VerticalOptions="CenterAndExpand" />
                    </Frame>
                    <RelativeLayout Grid.Row="8" Grid.Column="0" Margin="0" HeightRequest="18" BackgroundColor="{AppThemeBinding Default={StaticResource ImageButtonBackgroundLight}, Dark={StaticResource ImageButtonBackgroundDark}}" HorizontalOptions="Start" VerticalOptions="Start">
                        <Image Source="{common:ImageFromResource Resource=HitCounterManager.Resources.Images.icons8-information-18.png}" >
                            <Image.GestureRecognizers>
                                <TapGestureRecognizer Command="{Binding ToggleShowInfo}" CommandParameter="StyleSubscriptPB" NumberOfTapsRequired="1" />
                            </Image.GestureRecognizers>
                        </Image>
                    </RelativeLayout>
                    <Switch Grid.Row="8" Grid.Column="1" Margin="0" IsToggled="{Binding StyleSubscriptPB, Mode=TwoWay}" OnColor="Orange" ThumbColor="Green" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Label  Grid.Row="8" Grid.Column="2" Margin="0" Text="Subscripted PB totals" HorizontalOptions="Start" VerticalOptions="Center" />
                    <!-- Workaround: GTK is failing to use inherited color, so it is applied manually here -->
                    <Frame  Grid.Row="9" Grid.Column="0" Margin="0" Grid.ColumnSpan="3" OutlineColor="Accent" Padding="{OnPlatform 8, WPF=0}" HorizontalOptions="FillAndExpand" VerticalOptions="StartAndExpand"
                            IsVisible="{Binding ShowInfo[StyleSubscriptPB].Value, Mode=OneWay}"
                            BackgroundColor="{Binding Source={RelativeSource AncestorType={x:Type ContentPage}},Path=BackgroundColor, Mode=OneWay}">
                        <Label Padding="{OnPlatform 0, WPF=8}" Text="The PB totals shown for each split will be displayed smaller and lower." HorizontalOptions="FillAndExpand" VerticalOptions="CenterAndExpand" />
                    </Frame>
                    <RelativeLayout Grid.Row="10" Grid.Column="0" Margin="0" HeightRequest="18" BackgroundColor="{AppThemeBinding Default={StaticResource ImageButtonBackgroundLight}, Dark={StaticResource ImageButtonBackgroundDark}}" HorizontalOptions="Start" VerticalOptions="Start">
                        <Image Source="{common:ImageFromResource Resource=HitCounterManager.Resources.Images.icons8-information-18.png}" >
                            <Image.GestureRecognizers>
                                <TapGestureRecognizer Command="{Binding ToggleShowInfo}" CommandParameter="StyleUseRoman" NumberOfTapsRequired="1" />
                            </Image.GestureRecognizers>
                        </Image>
                    </RelativeLayout>
                    <Switch Grid.Row="10" Grid.Column="1" Margin="0" IsToggled="{Binding StyleUseRoman, Mode=TwoWay}" OnColor="Orange" ThumbColor="Green" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Label  Grid.Row="10" Grid.Column="2" Margin="0" Text="Roman numerals" HorizontalOptions="Start" VerticalOptions="Center" />
                    <!-- Workaround: GTK is failing to use inherited color, so it is applied manually here -->
                    <Frame  Grid.Row="11" Grid.Column="0" Margin="0" Grid.ColumnSpan="3" OutlineColor="Accent" Padding="{OnPlatform 8, WPF=0}" HorizontalOptions="FillAndExpand" VerticalOptions="StartAndExpand"
                            IsVisible="{Binding ShowInfo[StyleUseRoman].Value, Mode=OneWay}"
                            BackgroundColor="{Binding Source={RelativeSource AncestorType={x:Type ContentPage}},Path=BackgroundColor, Mode=OneWay}">
                        <Label Padding="{OnPlatform 0, WPF=8}" Text="The hit counts will be shown with Roman numerals." HorizontalOptions="FillAndExpand" VerticalOptions="CenterAndExpand" />
                    </Frame>
                    <RelativeLayout Grid.Row="12" Grid.Column="0" Margin="0" HeightRequest="18" BackgroundColor="{AppThemeBinding Default={StaticResource ImageButtonBackgroundLight}, Dark={StaticResource ImageButtonBackgroundDark}}" HorizontalOptions="Start" VerticalOptions="Start">
                        <Image Source="{common:ImageFromResource Resource=HitCounterManager.Resources.Images.icons8-information-18.png}" >
                            <Image.GestureRecognizers>
                                <TapGestureRecognizer Command="{Binding ToggleShowInfo}" CommandParameter="StyleHightlightCurrentSplit" NumberOfTapsRequired="1" />
                            </Image.GestureRecognizers>
                        </Image>
                    </RelativeLayout>
                    <Switch Grid.Row="12" Grid.Column="1" Margin="0" IsToggled="{Binding StyleHightlightCurrentSplit, Mode=TwoWay}" OnColor="Orange" ThumbColor="Green" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Label  Grid.Row="12" Grid.Column="2" Margin="0" Text="Highlight current split" HorizontalTextAlignment="Start" VerticalOptions="Center" />
                    <!-- Workaround: GTK is failing to use inherited color, so it is applied manually here -->
                    <Frame  Grid.Row="13" Grid.Column="0" Margin="0" Grid.ColumnSpan="3" OutlineColor="Accent" Padding="{OnPlatform 8, WPF=0}" HorizontalOptions="FillAndExpand" VerticalOptions="StartAndExpand"
                            IsVisible="{Binding ShowInfo[StyleHightlightCurrentSplit].Value, Mode=OneWay}"
                            BackgroundColor="{Binding Source={RelativeSource AncestorType={x:Type ContentPage}},Path=BackgroundColor, Mode=OneWay}">
                        <Label Padding="{OnPlatform 0, WPF=8}" Text="The row with the current split will stand out a little bit." HorizontalOptions="FillAndExpand" VerticalOptions="CenterAndExpand" />
                    </Frame>
                </Grid>

                <Grid Padding="0" Margin="10,0,10,0" RowSpacing="4" ColumnSpacing="6" HorizontalOptions="FillAndExpand">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Label Grid.Row="0" Grid.Column="0" Margin="0" VerticalOptions="Center" HorizontalOptions="Start" Text="Desired width (in px):" />
                    <Entry Grid.Row="0" Grid.Column="1" Margin="0" HorizontalOptions="FillAndExpand" Text="{Binding StyleDesiredWidth, Mode=TwoWay}">
                        <Entry.Behaviors>
                            <common:NaturalNumbersEntryValidationBehavior />
                        </Entry.Behaviors>
                    </Entry>
                    <Label Grid.Row="1" Grid.Column="0" Margin="0" VerticalOptions="Center" HorizontalOptions="Start" Text="Desired height (in px)" />
                    <Entry Grid.Row="1" Grid.Column="1" Margin="0" HorizontalOptions="FillAndExpand" Text="{Binding StyleDesiredHeight, Mode=TwoWay}">
                        <Entry.Behaviors>
                            <common:NaturalNumbersEntryValidationBehavior />
                        </Entry.Behaviors>
                    </Entry>
                </Grid>
                <Label HorizontalOptions="FillAndExpand" Margin="30,0,0,0">
                    <Label.FormattedText>
                        <FormattedString>
                            <Span FontAttributes="Italic" FontSize="Body">When value is set back to 0, you may have to reload the browser.</Span>
                        </FormattedString>
                    </Label.FormattedText>
                </Label>

                <Label HorizontalOptions="StartAndExpand" Text="Customization" />
                <StackLayout Orientation="Horizontal" VerticalOptions="Start" HorizontalOptions="FillAndExpand">
                    <Switch Margin="0" IsToggled="{Binding StyleUseCustom, Mode=TwoWay}" OnColor="Orange" ThumbColor="Green" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Label  Margin="0" Text="Use custom stylesheet and font" HorizontalOptions="Start" VerticalOptions="Center" />
                </StackLayout>
                <Grid Padding="0" Margin="10,0,10,0" RowSpacing="4" ColumnSpacing="6" HorizontalOptions="FillAndExpand">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="20" />
                    </Grid.ColumnDefinitions>
                    <Label  Grid.Row="0" Grid.Column="0" Margin="0" Text="Font name:" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Entry  Grid.Row="0" Grid.Column="1" Margin="0" Grid.ColumnSpan="2" Text="{Binding StyleFontName, Mode=TwoWay}" HorizontalOptions="FillAndExpand" VerticalOptions="Center" />
                    <Label  Grid.Row="1" Grid.Column="0" Margin="0" Text="Font (URL):" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Entry  Grid.Row="1" Grid.Column="1" Margin="0" Text="{Binding StyleFontUrl, Mode=TwoWay}" HorizontalOptions="FillAndExpand" VerticalOptions="Center" />
                    <RelativeLayout Grid.Row="1" Grid.Column="2" Margin="0" BackgroundColor="{AppThemeBinding Default={StaticResource ImageButtonBackgroundLight}, Dark={StaticResource ImageButtonBackgroundDark}}" HorizontalOptions="FillAndExpand" VerticalOptions="Center">
                        <Image Source="{common:ImageFromResource Resource=HitCounterManager.Resources.Images.icons8-search-in-browser-20.png}" >
                            <Image.GestureRecognizers>
                                <TapGestureRecognizer Command="{Binding WebOpenGoogleFontsUrl}" NumberOfTapsRequired="1" />
                            </Image.GestureRecognizers>
                        </Image>
                    </RelativeLayout>
                    <Label  Grid.Row="2" Grid.Column="0" Margin="0" Text="CSS (URL):" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Entry  Grid.Row="2" Grid.Column="1" Margin="0" Grid.ColumnSpan="2" Text="{Binding StyleCssUrl, Mode=TwoWay}" HorizontalOptions="FillAndExpand" VerticalOptions="Center" />
                </Grid>
                <StackLayout Orientation="Horizontal" VerticalOptions="Start" HorizontalOptions="FillAndExpand">
                    <Label HorizontalOptions="StartAndExpand" Text="Please hit apply to save and use the custom settings:" />
                    <Button Margin="0" Command="{Binding ApplyCssAndFont}" WidthRequest="200" Text="Apply" HorizontalOptions="End"/>
                </StackLayout>

                <!-- ================== -->
                <!-- ================== -->
                <!-- ================== -->

                <!-- Workaround: GTK is failing to use inherited color, so it is applied manually here -->
                <Frame BackgroundColor="#CC6600" OutlineColor="#CC6600" Padding="{OnPlatform 8, WPF=0}" HorizontalOptions="FillAndExpand" VerticalOptions="StartAndExpand" >
                    <Label Padding="{OnPlatform 0, WPF=8}" HorizontalOptions="CenterAndExpand" Text="BEHAVIOR" FontAttributes="Bold" FontFamily="Arial" FontSize="{OnPlatform 14, GTK=12}" />
                </Frame>

                <Label HorizontalOptions="StartAndExpand" Text="Purpose" />
                <Grid Padding="0" Margin="10,0,10,0" RowSpacing="4" ColumnSpacing="6" HorizontalOptions="FillAndExpand">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="18" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <RelativeLayout Grid.Row="0" Grid.Column="0" Margin="0" HeightRequest="18" BackgroundColor="{AppThemeBinding Default={StaticResource ImageButtonBackgroundLight}, Dark={StaticResource ImageButtonBackgroundDark}}" HorizontalOptions="Start" VerticalOptions="Start">
                        <Image Source="{common:ImageFromResource Resource=HitCounterManager.Resources.Images.icons8-information-18.png}" >
                            <Image.GestureRecognizers>
                                <TapGestureRecognizer Command="{Binding ToggleShowInfo}" CommandParameter="RadioPurpose_SplitCounter" NumberOfTapsRequired="1" />
                            </Image.GestureRecognizers>
                        </Image>
                    </RelativeLayout>
                    <Switch Grid.Row="0" Grid.Column="1" Margin="0" IsToggled="{Binding RadioPurpose_SplitCounter, Mode=TwoWay}" OnColor="Orange" ThumbColor="Green" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Label  Grid.Row="0" Grid.Column="2" Margin="0" Text="Split counter" HorizontalOptions="Start" VerticalOptions="Center" />
                    <!-- Workaround: GTK is failing to use inherited color, so it is applied manually here -->
                    <Frame  Grid.Row="1" Grid.Column="0" Margin="0" Grid.ColumnSpan="3" OutlineColor="Accent" Padding="{OnPlatform 8, WPF=0}" HorizontalOptions="FillAndExpand" VerticalOptions="StartAndExpand"
                            IsVisible="{Binding ShowInfo[RadioPurpose_SplitCounter].Value, Mode=OneWay}"
                            BackgroundColor="{Binding Source={RelativeSource AncestorType={x:Type ContentPage}},Path=BackgroundColor, Mode=OneWay}">
                        <Label Padding="{OnPlatform 0, WPF=8}" Text="This is the most commonly used counter to keep track of hits. As long as the hit count of a split is 0 it is considered a good split." HorizontalOptions="FillAndExpand" VerticalOptions="CenterAndExpand" />
                    </Frame>
                    <RelativeLayout Grid.Row="2" Grid.Column="0" Margin="0" HeightRequest="18" BackgroundColor="{AppThemeBinding Default={StaticResource ImageButtonBackgroundLight}, Dark={StaticResource ImageButtonBackgroundDark}}" HorizontalOptions="Start" VerticalOptions="Start">
                        <Image Source="{common:ImageFromResource Resource=HitCounterManager.Resources.Images.icons8-information-18.png}" >
                            <Image.GestureRecognizers>
                                <TapGestureRecognizer Command="{Binding ToggleShowInfo}" CommandParameter="RadioPurpose_Checklist" NumberOfTapsRequired="1" />
                            </Image.GestureRecognizers>
                        </Image>
                    </RelativeLayout>
                    <Switch Grid.Row="2" Grid.Column="1" Margin="0" IsToggled="{Binding RadioPurpose_Checklist, Mode=TwoWay}" OnColor="Orange" ThumbColor="Green" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Label  Grid.Row="2" Grid.Column="2" Margin="0" Text="Checklist" HorizontalOptions="Start" VerticalOptions="Center" />
                    <!-- Workaround: GTK is failing to use inherited color, so it is applied manually here -->
                    <Frame  Grid.Row="3" Grid.Column="0" Margin="0" Grid.ColumnSpan="3" OutlineColor="Accent" Padding="{OnPlatform 8, WPF=0}" HorizontalOptions="FillAndExpand" VerticalOptions="StartAndExpand"
                            IsVisible="{Binding ShowInfo[RadioPurpose_Checklist].Value, Mode=OneWay}"
                            BackgroundColor="{Binding Source={RelativeSource AncestorType={x:Type ContentPage}},Path=BackgroundColor, Mode=OneWay}">
                        <Label Padding="{OnPlatform 0, WPF=8}" Text="If you do not have a fixed order, this option can be used to keep track of different events (doing random boss runs oder collecting achievements). When a hit is registered a split, it means the split is done." HorizontalOptions="FillAndExpand" VerticalOptions="CenterAndExpand" />
                    </Frame>
                    <RelativeLayout Grid.Row="4" Grid.Column="0" Margin="0" HeightRequest="18" BackgroundColor="{AppThemeBinding Default={StaticResource ImageButtonBackgroundLight}, Dark={StaticResource ImageButtonBackgroundDark}}" HorizontalOptions="Start" VerticalOptions="Start">
                        <Image Source="{common:ImageFromResource Resource=HitCounterManager.Resources.Images.icons8-information-18.png}" >
                            <Image.GestureRecognizers>
                                <TapGestureRecognizer Command="{Binding ToggleShowInfo}" CommandParameter="RadioPurpose_NoDeath" NumberOfTapsRequired="1" />
                            </Image.GestureRecognizers>
                        </Image>
                    </RelativeLayout>
                    <Switch Grid.Row="4" Grid.Column="1" Margin="0" IsToggled="{Binding RadioPurpose_NoDeath, Mode=TwoWay}" OnColor="Orange" ThumbColor="Green" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Label  Grid.Row="4" Grid.Column="2" Margin="0" Text="No death" HorizontalOptions="Start" VerticalOptions="Center" />
                    <!-- Workaround: GTK is failing to use inherited color, so it is applied manually here -->
                    <Frame  Grid.Row="5" Grid.Column="0" Margin="0" Grid.ColumnSpan="3" OutlineColor="Accent" Padding="{OnPlatform 8, WPF=0}" HorizontalOptions="FillAndExpand" VerticalOptions="StartAndExpand"
                            IsVisible="{Binding ShowInfo[RadioPurpose_NoDeath].Value, Mode=OneWay}"
                            BackgroundColor="{Binding Source={RelativeSource AncestorType={x:Type ContentPage}},Path=BackgroundColor, Mode=OneWay}">
                        <Label Padding="{OnPlatform 0, WPF=8}" Text="Similar to the Split counter option but with one the major difference. From the first split that has at least one hit, all further splits are considered bad splits." HorizontalOptions="FillAndExpand" VerticalOptions="CenterAndExpand" />
                    </Frame>
                    <RelativeLayout Grid.Row="6" Grid.Column="0" Margin="0" HeightRequest="18" BackgroundColor="{AppThemeBinding Default={StaticResource ImageButtonBackgroundLight}, Dark={StaticResource ImageButtonBackgroundDark}}" HorizontalOptions="Start" VerticalOptions="Start">
                        <Image Source="{common:ImageFromResource Resource=HitCounterManager.Resources.Images.icons8-information-18.png}" >
                            <Image.GestureRecognizers>
                                <TapGestureRecognizer Command="{Binding ToggleShowInfo}" CommandParameter="RadioPurpose_DeathCounter" NumberOfTapsRequired="1" />
                            </Image.GestureRecognizers>
                        </Image>
                    </RelativeLayout>
                    <Switch Grid.Row="6" Grid.Column="1" Margin="0" IsToggled="{Binding RadioPurpose_DeathCounter, Mode=TwoWay}" OnColor="Orange" ThumbColor="Green" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Label  Grid.Row="6" Grid.Column="2" Margin="0" Text="Death counter" HorizontalOptions="Start" VerticalOptions="Center" />
                    <!-- Workaround: GTK is failing to use inherited color, so it is applied manually here -->
                    <Frame  Grid.Row="7" Grid.Column="0" Margin="0" Grid.ColumnSpan="3" OutlineColor="Accent" Padding="{OnPlatform 8, WPF=0}" HorizontalOptions="FillAndExpand" VerticalOptions="StartAndExpand"
                            IsVisible="{Binding ShowInfo[RadioPurpose_DeathCounter].Value, Mode=OneWay}"
                            BackgroundColor="{Binding Source={RelativeSource AncestorType={x:Type ContentPage}},Path=BackgroundColor, Mode=OneWay}">
                        <Label Padding="{OnPlatform 0, WPF=8}" Text="A very simplistic counter that does not show any splits but the total hit count as deaths. It can still be combined with the progress bar and a timer." HorizontalOptions="FillAndExpand" VerticalOptions="CenterAndExpand" />
                    </Frame>
                    <RelativeLayout Grid.Row="8" Grid.Column="0" Margin="0" HeightRequest="18" BackgroundColor="{AppThemeBinding Default={StaticResource ImageButtonBackgroundLight}, Dark={StaticResource ImageButtonBackgroundDark}}" HorizontalOptions="Start" VerticalOptions="Start">
                        <Image Source="{common:ImageFromResource Resource=HitCounterManager.Resources.Images.icons8-information-18.png}" >
                            <Image.GestureRecognizers>
                                <TapGestureRecognizer Command="{Binding ToggleShowInfo}" CommandParameter="RadioPurpose_ResetCounter" NumberOfTapsRequired="1" />
                            </Image.GestureRecognizers>
                        </Image>
                    </RelativeLayout>
                    <Switch Grid.Row="8" Grid.Column="1" Margin="0" IsToggled="{Binding RadioPurpose_ResetCounter, Mode=TwoWay}" OnColor="Orange" ThumbColor="Green" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Label  Grid.Row="8" Grid.Column="2" Margin="0" Text="Run reset counter" HorizontalOptions="Start" VerticalOptions="Center" />
                    <!-- Workaround: GTK is failing to use inherited color, so it is applied manually here -->
                    <Frame  Grid.Row="9" Grid.Column="0" Margin="0" Grid.ColumnSpan="3" OutlineColor="Accent" Padding="{OnPlatform 8, WPF=0}" HorizontalOptions="FillAndExpand" VerticalOptions="StartAndExpand"
                            IsVisible="{Binding ShowInfo[RadioPurpose_ResetCounter].Value, Mode=OneWay}"
                            BackgroundColor="{Binding Source={RelativeSource AncestorType={x:Type ContentPage}},Path=BackgroundColor, Mode=OneWay}">
                        <Label Padding="{OnPlatform 0, WPF=8}" Text="Instead of counting hits, this options can be used to COUNT RESETS instead. Keep in mind that PB is not used and the run shall never be reset. Resetting a run means just incrementing the hit count on the split when the reset happens and select the first split using the main window. This will keep your reset counts (hits) alive and you can later see how many runs have died on certain splits." HorizontalOptions="FillAndExpand" VerticalOptions="CenterAndExpand" />
                    </Frame>
                </Grid>

                <Label HorizontalOptions="StartAndExpand" Text="Hit severity (color of Neither nor)" />
                <Grid Padding="0" Margin="10,0,10,0" RowSpacing="4" ColumnSpacing="6" HorizontalOptions="FillAndExpand">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="18" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <RelativeLayout Grid.Row="0" Grid.Column="0" Margin="0" HeightRequest="18" BackgroundColor="{AppThemeBinding Default={StaticResource ImageButtonBackgroundLight}, Dark={StaticResource ImageButtonBackgroundDark}}" HorizontalOptions="Start" VerticalOptions="Start">
                        <Image Source="{common:ImageFromResource Resource=HitCounterManager.Resources.Images.icons8-information-18.png}" >
                            <Image.GestureRecognizers>
                                <TapGestureRecognizer Command="{Binding ToggleShowInfo}" CommandParameter="RadioHitSeverity_AnyHitCritical" NumberOfTapsRequired="1" />
                            </Image.GestureRecognizers>
                        </Image>
                    </RelativeLayout>
                    <Switch Grid.Row="0" Grid.Column="1" Margin="0" IsToggled="{Binding RadioHitSeverity_AnyHitCritical, Mode=TwoWay}" OnColor="Orange" ThumbColor="Green" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Label  Grid.Row="0" Grid.Column="2" Margin="0" Text="Any hit is critical" HorizontalOptions="Start" VerticalOptions="Center" />
                    <!-- Workaround: GTK is failing to use inherited color, so it is applied manually here -->
                    <Frame  Grid.Row="1" Grid.Column="0" Margin="0" Grid.ColumnSpan="3" OutlineColor="Accent" Padding="{OnPlatform 8, WPF=0}" HorizontalOptions="FillAndExpand" VerticalOptions="StartAndExpand"
                            IsVisible="{Binding ShowInfo[RadioHitSeverity_AnyHitCritical].Value, Mode=OneWay}"
                            BackgroundColor="{Binding Source={RelativeSource AncestorType={x:Type ContentPage}},Path=BackgroundColor, Mode=OneWay}">
                        <Label Padding="{OnPlatform 0, WPF=8}" Text="" HorizontalOptions="FillAndExpand" VerticalOptions="CenterAndExpand">
                            <Label.FormattedText>
                                <FormattedString>
                                    <Span>Counting independently of the hit type (boss or way)
GOOD splits have a hit count of 0
BAD splits have at least one hit</Span>
                                </FormattedString>
                            </Label.FormattedText>
                        </Label>
                    </Frame>
                    <RelativeLayout Grid.Row="2" Grid.Column="0" Margin="0" HeightRequest="18" BackgroundColor="{AppThemeBinding Default={StaticResource ImageButtonBackgroundLight}, Dark={StaticResource ImageButtonBackgroundDark}}" HorizontalOptions="Start" VerticalOptions="Start">
                        <Image Source="{common:ImageFromResource Resource=HitCounterManager.Resources.Images.icons8-information-18.png}" >
                            <Image.GestureRecognizers>
                                <TapGestureRecognizer Command="{Binding ToggleShowInfo}" CommandParameter="RadioHitSeverity_ComparePB" NumberOfTapsRequired="1" />
                            </Image.GestureRecognizers>
                        </Image>
                    </RelativeLayout>
                    <Switch Grid.Row="2" Grid.Column="1" Margin="0" IsToggled="{Binding RadioHitSeverity_ComparePB, Mode=TwoWay}" OnColor="Orange" ThumbColor="Green" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Label  Grid.Row="2" Grid.Column="2" Margin="0" Text="Only boss hits are critical" HorizontalOptions="Start" VerticalOptions="Center" />
                    <!-- Workaround: GTK is failing to use inherited color, so it is applied manually here -->
                    <Frame  Grid.Row="3" Grid.Column="0" Margin="0" Grid.ColumnSpan="3" OutlineColor="Accent" Padding="{OnPlatform 8, WPF=0}" HorizontalOptions="FillAndExpand" VerticalOptions="StartAndExpand"
                            IsVisible="{Binding ShowInfo[RadioHitSeverity_ComparePB].Value, Mode=OneWay}"
                            BackgroundColor="{Binding Source={RelativeSource AncestorType={x:Type ContentPage}},Path=BackgroundColor, Mode=OneWay}">
                        <Label Padding="{OnPlatform 0, WPF=8}" Text="" HorizontalOptions="FillAndExpand" VerticalOptions="CenterAndExpand">
                            <Label.FormattedText>
                                <FormattedString>
                                    <Span>Marks hits during boss fight more severe than hits on the way.
GOOD splits have a hit count of 0
EVEN splits have at least one hit counted for the way but have 0 hits for bosses
BAD splits have at least one hit counted for bosses</Span>
                                </FormattedString>
                            </Label.FormattedText>
                        </Label>
                    </Frame>
                    <RelativeLayout Grid.Row="4" Grid.Column="0" Margin="0" HeightRequest="18" BackgroundColor="{AppThemeBinding Default={StaticResource ImageButtonBackgroundLight}, Dark={StaticResource ImageButtonBackgroundDark}}" HorizontalOptions="Start" VerticalOptions="Start">
                        <Image Source="{common:ImageFromResource Resource=HitCounterManager.Resources.Images.icons8-information-18.png}" >
                            <Image.GestureRecognizers>
                                <TapGestureRecognizer Command="{Binding ToggleShowInfo}" CommandParameter="RadioHitSeverity_BossHitCritical" NumberOfTapsRequired="1" />
                            </Image.GestureRecognizers>
                        </Image>
                    </RelativeLayout>
                    <Switch Grid.Row="4" Grid.Column="1" Margin="0" IsToggled="{Binding RadioHitSeverity_BossHitCritical, Mode=TwoWay}" OnColor="Orange" ThumbColor="Green" HorizontalOptions="Start" VerticalOptions="Center" />
                    <Label  Grid.Row="4" Grid.Column="2" Margin="0" Text="Compare with PB" HorizontalOptions="Start" VerticalOptions="Center" />
                    <!-- Workaround: GTK is failing to use inherited color, so it is applied manually here -->
                    <Frame  Grid.Row="5" Grid.Column="0" Margin="0" Grid.ColumnSpan="3" OutlineColor="Accent" Padding="{OnPlatform 8, WPF=0}" HorizontalOptions="FillAndExpand" VerticalOptions="StartAndExpand"
                            IsVisible="{Binding ShowInfo[RadioHitSeverity_BossHitCritical].Value, Mode=OneWay}"
                            BackgroundColor="{Binding Source={RelativeSource AncestorType={x:Type ContentPage}},Path=BackgroundColor, Mode=OneWay}">
                        <Label Padding="{OnPlatform 0, WPF=8}" Text="" HorizontalOptions="FillAndExpand" VerticalOptions="CenterAndExpand">
                            <Label.FormattedText>
                                <FormattedString>
                                    <Span>Marks hit counts beyond the PB hit counts more severe.
GOOD splits have a hit count of 0
EVEN splits have at least one hit counted but still have even or less hits than on the PB run
BAD splits have more hits than on the PB run</Span>
                                </FormattedString>
                            </Label.FormattedText>
                        </Label>
                    </Frame>
                </Grid>

                <Grid Padding="0" Margin="10,0,10,0" RowSpacing="4" ColumnSpacing="6" HorizontalOptions="FillAndExpand">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Label Grid.Row="0" Grid.Column="0" Margin="0" VerticalOptions="Center" HorizontalOptions="Start" Text="Maxium previous splits:" />
                    <Entry Grid.Row="0" Grid.Column="1" Margin="0" HorizontalOptions="FillAndExpand" Text="{Binding ShowSplitsCountFinished, Mode=TwoWay}">
                        <Entry.Behaviors>
                            <common:NaturalNumbersEntryValidationBehavior />
                        </Entry.Behaviors>
                    </Entry>
                    <Label Grid.Row="1" Grid.Column="0" Margin="0" VerticalOptions="Center" HorizontalOptions="Start" Text="Maxium upcoming splits:" />
                    <Entry Grid.Row="1" Grid.Column="1" Margin="0" HorizontalOptions="FillAndExpand" Text="{Binding ShowSplitsCountUpcoming, Mode=TwoWay}">
                        <Entry.Behaviors>
                            <common:NaturalNumbersEntryValidationBehavior />
                        </Entry.Behaviors>
                    </Entry>
                </Grid>
                <Label HorizontalOptions="FillAndExpand" Margin="30,0,0,0">
                    <Label.FormattedText>
                        <FormattedString>
                            <!-- TODO: Show values combined instead of mathematics term -->
                            <Span FontAttributes="Italic" FontSize="Body" Text="Current configuration will show up to " />
                            <Span FontAttributes="Italic" FontSize="Body" Text="{Binding ShowSplitsCountFinished, Mode=OneWay}" />
                            <Span FontAttributes="Italic" FontSize="Body" Text=" + " />
                            <Span FontAttributes="Italic" FontSize="Body" Text="{Binding ShowSplitsCountUpcoming, Mode=OneWay}" />
                            <Span FontAttributes="Italic" FontSize="Body" Text=" splits." />
                        </FormattedString>
                    </Label.FormattedText>
                </Label>

                <!-- ================== -->
                <!-- ================== -->
                <!-- ================== -->

                <!-- examples: https://docs.microsoft.com/en-us/xamarin/xamarin-forms/user-interface/controls/views
                <Label Text="CheckBox" />
                <CheckBox Color="Green" VerticalOptions="Center" />
                <Label Text="Slider" />
                <Slider Maximum="360" />
                <Label Text="Stepper" />
                <Stepper Maximum="360" Increment="30" HorizontalOptions="Center" />
                <Label Text="Switch" />
                <Switch x:Name="xamlSwitch" IsToggled="False" OnColor="Orange" ThumbColor="Green" HorizontalOptions="CenterAndExpand" /> -->
            </StackLayout>
        </ScrollView>

        <Button Padding="4" Clicked="PopBack_Clicked" WidthRequest="50" Text="Back" HorizontalOptions="Start"/>
    </StackLayout>
</ContentPage>
